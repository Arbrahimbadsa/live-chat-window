{"version":3,"sources":["components/chatBox/firebase.js","components/chatBox/chatWindow.js","components/chatBox/adminWindow.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","roomId","uuid","localStorage","getItem","uuidv4","setItem","getUUID","roomRef","ref","ChatWindow","useState","messages","setMessages","newMessageCount","setNewMessageCount","isOpen","setIsOpen","useEffect","orderByChild","on","snap","val","author","sendMessage","data","count","text","msgs","type","className","style","margin","agentProfile","teamName","imageUrl","messageList","onMessageWasSent","message","messageId","child","set","time","ServerValue","TIMESTAMP","newMessagesCount","handleClick","roomsRef","Room","name","click","onClick","AdminWindow","rooms","setRooms","showLauncher","setShowLauncher","setRoomId","roomName","setRoomName","rms","key","length","map","roomKey","i","id","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a9bcf24.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBUt8HJpxv8r-kEAMU4g4PR9dqHyV-s_CA\",\r\n    authDomain: \"live-chat-29783.firebaseapp.com\",\r\n    databaseURL: \"https://live-chat-29783.firebaseio.com\",\r\n    projectId: \"live-chat-29783\",\r\n    storageBucket: \"live-chat-29783.appspot.com\",\r\n    messagingSenderId: \"36963800701\",\r\n    appId: \"1:36963800701:web:3f3b9828f1425a53438314\",\r\n    measurementId: \"G-2FB14HT703\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig); // init firebase app","import React, { useEffect, useState } from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport './firebase';\r\nimport firebase from 'firebase';\r\nimport {Launcher} from 'react-chat-window';\r\n\r\nconst db = firebase.database();\r\n\r\nconst getUUID = () => {\r\n    let uuid;\r\n    let storageId = localStorage.getItem('uuid');\r\n    if (storageId == null) {\r\n        uuid = uuidv4();\r\n        localStorage.setItem('uuid', uuid);\r\n        return uuid;\r\n    } else {\r\n        return localStorage.getItem('uuid');\r\n    }\r\n}\r\n\r\nlet roomId = getUUID();;\r\n\r\nlet roomRef = db.ref('rooms/' + roomId);\r\n\r\nconst ChatWindow = () => {\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const [text, setText] = useState('');\r\n    const [newMessageCount, setNewMessageCount] = useState(0);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    // load messages\r\n    useEffect(() => {\r\n\r\n        // get the messages once and set it to the state\r\n        // roomRef.once('value').then(data => {\r\n        //     const keys = Object.keys(data.val());\r\n        //     const val = data.val();\r\n            \r\n        //     keys.forEach(key => setMessages(msgs => [...msgs, val[key]]));\r\n\r\n        // });\r\n\r\n        const sortByTimeRef = roomRef.orderByChild('time');\r\n\r\n        sortByTimeRef.on('child_added', (snap) => {\r\n            const val = snap.val();\r\n            let author = val.roomId === roomId ? 'me' : 'them';\r\n            sendMessage(author, val.data); // send message to client\r\n            setNewMessageCount(count => count + 1);\r\n        });\r\n\r\n    }, []); // runs only once after the element mounted\r\n\r\n    const sendMessage = (author, data) => {\r\n        if (data.text) {\r\n            setMessages(msgs => [...msgs, {author: author, type: 'text', data}]);\r\n        }\r\n    }\r\n\r\n    const onMessageWasSent = message => {\r\n\r\n        //setMessages([...messages, message]); // don't update the state here since we have added child_added event. It will be automatically triggered when a new child or message is added in the room.\r\n        \r\n        // add to firebase when message was sent from client\r\n        const messageId = uuidv4();\r\n        const msgRef = roomRef.child(messageId);\r\n        msgRef.set({...message, roomId, time: firebase.database.ServerValue.TIMESTAMP}); // set to user/current-uuid\r\n\r\n    }\r\n\r\n    const launcherHandleClick = () => {\r\n        setIsOpen(!isOpen);\r\n        setNewMessageCount(0);\r\n    }\r\n\r\n    return (\r\n        <div className='chat-window'>\r\n            <p style={{margin: '10px'}}>Go to /admin to see the admin window.</p>\r\n            <Launcher\r\n            agentProfile={{\r\n                teamName: 'Eqsist',\r\n                imageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png'\r\n            }}\r\n            messageList={messages}\r\n            onMessageWasSent={onMessageWasSent}\r\n            newMessagesCount={newMessageCount}\r\n            handleClick={launcherHandleClick}\r\n            isOpen={isOpen}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatWindow;","import React, { useEffect, useState } from 'react';\r\nimport './firebase';\r\nimport firebase from 'firebase';\r\nimport {Launcher} from 'react-chat-window';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst db = firebase.database();\r\n\r\nconst roomsRef = db.ref('rooms');\r\n\r\nconst Room = ({name, click}) => {\r\n\r\n    return (\r\n        <div onClick={click} className='room'>\r\n            <p> {name} </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AdminWindow = () => {\r\n\r\n    const [rooms, setRooms] = useState([]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [showLauncher, setShowLauncher] = useState(false);\r\n    const [newMessageCount, setNewMessageCount] = useState(5);\r\n    const [messages, setMessages] = useState([]);\r\n    const [roomId, setRoomId] = useState(null);\r\n    const [roomName, setRoomName] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n        roomsRef.on('child_added', (snap) => {\r\n            setRooms(rms => [...rms, snap.key]);\r\n        });\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setMessages([]); // always clear messages first\r\n        if (roomId) {\r\n\r\n            const ref = db.ref('rooms/' + roomId).orderByChild('time');\r\n            ref.on('child_added', (snap) => {\r\n                //console.log(snap.val());\r\n                const val = snap.val();\r\n                let author = val.roomId === roomId ? 'me' : 'them';\r\n                sendMessage(author, val.data);\r\n                setNewMessageCount(count => count + 1);\r\n            });\r\n\r\n        }\r\n    }, [roomId]);\r\n\r\n    const sendMessage = (author, data) => {\r\n        if (data.text) {\r\n            setMessages(msgs => [...msgs, {author: author, type: 'text', data}]);\r\n        }\r\n    }\r\n\r\n    const onMessageWasSent = (message) => {\r\n        const messageId = uuidv4();\r\n        const roomRef = db.ref('rooms/' + roomId);\r\n        const msgRef = roomRef.child(messageId);\r\n        msgRef.set({...message, roomId, time: firebase.database.ServerValue.TIMESTAMP});\r\n    }\r\n\r\n    const handleLauncherClick = () => {\r\n        setIsOpen(!isOpen);\r\n        setNewMessageCount(0);\r\n    }\r\n\r\n    const handleRoomClick = (data) => {\r\n        setRoomId(data.key);\r\n        setRoomName(data.name);\r\n        setShowLauncher(true);\r\n        setIsOpen(true);\r\n    }\r\n  \r\n    return (\r\n        <div className='admin-window'>\r\n            <div className='admin-window-header'>\r\n                <h3>All Rooms</h3>\r\n                <p>You have {rooms.length} rooms. Select a room to start replying.</p>\r\n            </div>\r\n            <div className=\"rooms\">\r\n                {rooms ? rooms.map((roomKey, i) => <Room \r\n                id={roomKey} \r\n                name={'Room ' + (i+1)} \r\n                key={i} \r\n                click={() => handleRoomClick({key: roomKey, name: 'Room ' + (i+1)})}\r\n                />) : 'Loading...' }\r\n            </div>\r\n            {showLauncher ? <Launcher\r\n            agentProfile={{\r\n                teamName: roomName,\r\n                imageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png'\r\n            }}\r\n            messageList={messages}\r\n            newMessagesCount={newMessageCount}\r\n            isOpen={isOpen}\r\n            handleClick={handleLauncherClick}\r\n            onMessageWasSent={onMessageWasSent}\r\n             /> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminWindow;","import './App.css';\nimport ChatWindow from './components/chatBox/chatWindow';\nimport AdminWindow from './components/chatBox/adminWindow';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/'>\n            <ChatWindow />\n          </Route>\n          <Route path='/admin'>\n            <AdminWindow />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}